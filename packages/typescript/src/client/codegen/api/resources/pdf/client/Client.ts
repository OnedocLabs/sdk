/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import * as Fileforge from "../../../index";
import * as stream from "stream";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as serializers from "../../../../serialization/index";
import { Form } from "../resources/form/client/Client";

export declare namespace Pdf {
    interface Options {
        environment?: core.Supplier<environments.FileforgeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

/**
 * PDF operations
 */
export class Pdf {
    constructor(protected readonly _options: Pdf.Options = {}) {}

    /**
     * Converts a Microsoft Word document (.DOCX or .DOC) file to a PDF document.
     *
     * This service uses a LibreOffice headless server to perform the conversion, and may not support all features of the original document.
     *
     * **Known discrepancies**
     *
     * - Some fonts may not be available in the server, and may be substituted by a closest match.
     * - Some complex formatting may not be preserved, such as background graphics.
     *
     * **Variables**
     *
     * Variable replacement is supported with various methods:
     *
     * - Templated litterals: `{{name}}`
     * - Word variables, as listed in the document metadata: `{DOCVARIABLE "name"}`
     *
     * To enable variable replacement as Word variables for your account, please contact the FileForge support.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    public async fromDocx(
        file: File | fs.ReadStream,
        request: Fileforge.PdfFromDocxRequest,
        requestOptions?: Pdf.RequestOptions
    ): Promise<stream.Readable> {
        const _request = new core.FormDataWrapper();
        await _request.append("options", JSON.stringify(request.options));
        await _request.append("file", file);
        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,
                "pdf/docx/"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Fileforge.UnauthorizedError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Generates a PDF document from web assets.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     * @throws {@link Fileforge.BadGatewayError}
     */
    public async generate(
        files: File[] | fs.ReadStream[],
        request: Fileforge.PdfGenerateRequest,
        requestOptions?: Pdf.RequestOptions
    ): Promise<stream.Readable> {
        const _request = new core.FormDataWrapper();
        await _request.append("options", JSON.stringify(request.options));
        for (const _file of files) {
            await _request.append("files", _file);
        }

        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,
                "pdf/generate/"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Fileforge.UnauthorizedError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                case 502:
                    throw new Fileforge.BadGatewayError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Merges multiple PDF documents into a single PDF document.
     * @throws {@link Fileforge.BadRequestError}
     * @throws {@link Fileforge.UnauthorizedError}
     * @throws {@link Fileforge.InternalServerError}
     */
    public async merge(
        files: File[] | fs.ReadStream[],
        request: Fileforge.PdfMergeRequest,
        requestOptions?: Pdf.RequestOptions
    ): Promise<stream.Readable> {
        const _request = new core.FormDataWrapper();
        await _request.append("options", JSON.stringify(request.options));
        for (const _file of files) {
            await _request.append("files", _file);
        }

        const _maybeEncodedRequest = _request.getRequest();
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FileforgeEnvironment.Default,
                "pdf/merge/"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...(await _maybeEncodedRequest.getHeaders()),
            },
            body: await _maybeEncodedRequest.getBody(),
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Fileforge.BadRequestError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Fileforge.UnauthorizedError(
                        await serializers.ErrorSchema.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Fileforge.InternalServerError(_response.error.body);
                default:
                    throw new errors.FileforgeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FileforgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FileforgeTimeoutError();
            case "unknown":
                throw new errors.FileforgeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected _form: Form | undefined;

    public get form(): Form {
        return (this._form ??= new Form(this._options));
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
